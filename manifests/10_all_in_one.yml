# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: k8straining
  labels:
    addonmanager.kubernetes.io/mode: Reconcile  
---
# ResourceQuota
apiVersion: v1
kind: ResourceQuota
metadata:
  name: k8straining
  namespace: k8straining
  labels:
    addonmanager.kubernetes.io/mode: Reconcile  
spec:
  hard:
    requests.cpu: "1"
    requests.memory: 1Gi
    limits.cpu: "2"
    limits.memory: 2Gi
---
# LimitRange
apiVersion: v1
kind: LimitRange
metadata:
  name: memory
  namespace: k8straining
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  limits:
  - default:
      memory: 256Mi
    defaultRequest:
      memory: 16Mi
    type: Container
---
apiVersion: v1
kind: LimitRange
metadata:
  name: cpu
  namespace: k8straining
  labels:
    addonmanager.kubernetes.io/mode: Reconcile  
spec:
  limits:
  - default:
      cpu: 200m
    defaultRequest:
      cpu: 10m
    type: Container
---
# ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis
  namespace: k8straining
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
data:
  master.conf: | 
    bind 0.0.0.0
    protected-mode yes
    port 6379
    tcp-backlog 511
    timeout 0
    tcp-keepalive 300
    daemonize no
    supervised no
    pidfile /var/run/redis_6379.pid
    loglevel notice
    logfile ""
    requirepass "P@ssw0rd"
  slave.conf: |
    slaveof redis-0.azure-vote-back 6379
    masterauth "P@ssw0rd"
---
# Secret    
apiVersion: v1
kind: Secret
metadata:
  name: redis
  namespace: k8straining
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
type: Opaque
data:
  # base64 encode of P@ssw0rd
  password: UEBzc3cwcmQ=
---
# StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: k8straining
  labels:
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  selector:
    matchLabels:
      app: redis
  serviceName: "azure-vote-back"
  replicas: 2
  template:
    metadata:
      labels:
        app: redis
      annotations:
    spec:
      initContainers:
      - name: init-redis
        image: redis:4.0.9
        command:
        - bash
        - "-c"
        - |
          set -ex
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          # Copy appropriate config files to emptyDir.
          if [[ $ordinal -eq 0 ]]; then
            cp /mnt/config/master.conf /etc/redis.conf
          else
            cp /mnt/config/slave.conf /etc/redis.conf
          fi
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
        volumeMounts:
        - name: redis
          mountPath: /etc
          subPath: redis.conf
        - name: cm
          mountPath: /mnt/config
      containers:
      - name: redis
        image: redis:4.0.9
        command: ["redis-server"]
        args: ["/etc/redis.conf"]
        env:
        - name: REDIS_PWD
          valueFrom:
            secretKeyRef:
              name: redis
              key: password
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
        ports:
        - name: redis
          containerPort: 6379
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "redis-cli -a $REDIS_PWD -h localhost ping"
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "redis-cli -a $REDIS_PWD -h localhost ping"
          initialDelaySeconds: 15
          periodSeconds: 15       
        volumeMounts:
        - name: redis
          mountPath: /data
          subPath: data
        - name: redis
          mountPath: /etc/
          subPath: redis.conf
      volumes:
      #- name: redis
      #  emptyDir: {}
      - name: cm
        configMap:
          name: redis
  volumeClaimTemplates:
  - metadata:
      name: redis
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 8Gi
---
# Headless    
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-back
  namespace: k8straining
  labels:
    addonmanager.kubernetes.io/mode: Reconcile  
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  clusterIP: None
  selector:
    app: redis
---
# Deployment    
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-vote-front
  namespace: k8straining
  labels:
    addonmanager.kubernetes.io/mode: EnsureExists
spec:
  revisionHistoryLimit: 20
  replicas: 1
  selector:
    matchLabels:
      app: azure-vote-front
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  minReadySeconds: 5 
  template:
    metadata:
      labels:
        app: azure-vote-front
    spec:
      nodeSelector:
        "beta.kubernetes.io/os": linux
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/master
                operator: DoesNotExist
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              preference:
                matchExpressions:
                - key: fe
                  operator: Exists
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - redis
                topologyKey: kubernetes.io/hostname                
      containers:
      - name: azure-vote-front
        image: huangyingting/azure-vote-front:v1
        ports:
        - containerPort: 80
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
        env:
        - name: REDIS
          value: "redis-0.azure-vote-back"
        - name: REDIS_PWD
          valueFrom:
            secretKeyRef:
              name: redis
              key: password        
---
# ClusterIP    
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front
  namespace: k8straining
  labels:
    addonmanager.kubernetes.io/mode: Reconcile    
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: azure-vote-front
---
# NodePort    
apiVersion: v1
kind: Service
metadata:
  name: azure-vote-front-nodeport
  namespace: k8straining
  labels:
    addonmanager.kubernetes.io/mode: Reconcile  
spec:
  type: NodePort
  ports:
  - nodePort: 31080
    protocol: TCP
    port: 80
    targetPort: 80
  selector:
    app: azure-vote-front
---
# Ingress    
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: vote
  namespace: k8straining
  labels:
    addonmanager.kubernetes.io/mode: Reconcile  
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
  - host: vote.k8s.devsecops.ink
    http:
      paths:
      - backend:
          serviceName: azure-vote-front
          servicePort: 80
        path: /
---
# NetworkPolicy
# nc -z -v azure-vote-back.k8straining.svc.cluster.local 6379
# nc -z -v redis-0.azure-vote-back.k8straining.svc.cluster.local 6379
# nc -z -v azure-vote-front 80
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: allow-front-to-back
  namespace: k8straining
  labels:
    addonmanager.kubernetes.io/mode: Reconcile  
spec:
  podSelector:
    matchLabels:
      app: redis
  ingress:
  - from:
    - namespaceSelector: {}
      podSelector:
        matchLabels:
          app: azure-vote-front
---
# NetworkPolicy    
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: allow-back-to-back
  namespace: k8straining
  labels:
    addonmanager.kubernetes.io/mode: Reconcile  
spec:
  podSelector:
    matchLabels:
      app: redis
  ingress:
  - from:
    - namespaceSelector: {}
      podSelector:
        matchLabels:
          app: redis
---
# Job    
apiVersion: batch/v1
kind: Job
metadata:
  name: vote-wget
  namespace: k8straining
  labels:
    addonmanager.kubernetes.io/mode: EnsureExists
spec:
  template:
    spec:
      containers:
      - name: wget
        image: busybox
        command: ["/bin/sh", "-c", "wget -q -O - http://vote.k8s.devsecops.ink"]
        resources:
          requests:
            cpu: 10m
            memory: 32Mi
          limits:
            cpu: 20m
            memory: 64Mi        
      restartPolicy: Never
  backoffLimit: 4
---
# CronJob
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: vote-wget
  namespace: k8straining
  labels:
    addonmanager.kubernetes.io/mode: Reconcile  
spec:
  schedule: "*/15 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: wget
            image: busybox
            args:
            - /bin/sh
            - -c
            - wget -q -O - http://vote.k8s.devsecops.ink
            resources:
              requests:
                cpu: 10m
                memory: 32Mi
              limits:
                cpu: 20m
                memory: 64Mi            
          restartPolicy: OnFailure
---
# HorizontalPodAutoscaler
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: azure-vote-front
  namespace: k8straining
  labels:
    addonmanager.kubernetes.io/mode: Reconcile  
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: azure-vote-front
  minReplicas: 1
  maxReplicas: 5
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 30
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 20
